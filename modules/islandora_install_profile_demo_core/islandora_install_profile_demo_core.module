<?php

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Link;
use Drupal\Core\Render\Element\RenderElement;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\node\NodeInterface;
use Drupal\islandora\IslandoraUtils;

/**
 * Implements hook_form_alter().
 */
function islandora_install_profile_demo_core_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && strstr($form['#id'], 'views-exposed-form-solr-search-content'))  {
    // Remove un-wanted fields
    $form['sort_by']['#type'] = 'hidden';
    $form['sort_order']['#type'] = 'hidden';
    $form['items_per_page']['#type'] = 'hidden';
  }
}
/**
 * Implements hook_theme().
 */
function islandora_install_profile_demo_core_theme($existing, $type, $theme, $path) {
  return [
    'views_header' => [
      'variables' => [
        'links' => [],
        'items_per_page' => [],
        'bottom_pager' => FALSE,
        'pager' => FALSE,
        'exposedFilters' => FALSE,
      ],
    ],
    'homepage' => [
      'variables' => [
        'vars' => [],
      ],
    ],
    // Views GROUP templates.
    'views_view_carapace_section_grouping' => [
      'variables' => ['view' => NULL, 'grouping' => NULL, 'grouping_level' => NULL, 'rows' => NULL, 'title' => NULL],
    ],
    'views_view_carapace_details' => array(
      'variables' => array('view' => NULL, 'rows' => NULL),
    ),
    'collection_ajax' => [],
    'islandora_object_links' => [
      'variables' => ['links' => [], 'object' => NULL]
    ],
  ];
}

/**
 * Prepares variables for views single grouping templates.
 *
 * Default template: views-view-grouping.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The view object.
 *   - rows: The rows returned from the view.
 *   - grouping_level: Integer indicating the hierarchical level of the
 *     grouping.
 *   - content: The content to be grouped.
 *   - title: The group heading.
 */
function template_preprocess_views_view_carapace_section_grouping(&$variables) {
  $variables['content'] = $variables['view']->style_plugin->renderGroupingSets($variables['rows'], $variables['grouping_level']);
  $variables['#attached'] = [
    'library' => [
      'islandora_install_profile_demo_core/mystic_behaviors'
    ],
  ];
}


/**
 * Implements hook_preprocess_form_element
 *
 * @param $variables
 */
function islandora_install_profile_demo_core_preprocess_form_element(&$variables) {
  $element = $variables['element'];
  if (isset($element['#label_attributes'])) {
    $variables['label']['#attributes'] = array_merge(
      $variables['label']['#attributes'],
      $element['#label_attributes']
    );
  }
}

/**
 * Return default sort dropdown
 *
 * @return array
 */
function _get_sort_options() {
  $defaultSelectedDirectionValue = (\Drupal::request()->query->get('sort_order') === 'ASC') ? 'up' : 'down';
  $defaultSelectedFieldValue = (!empty(\Drupal::request()->query->get('sort_by'))) ? \Drupal::request()->query->get('sort_by') : 'field_edtf_date_created';
  if ( ! \Drupal::service('router.admin_context')->isAdminRoute() ) {
    return  [
      '#type' => 'select',
      '#title' => 'Sort Options',
      '#label_attributes' => ['class' => ['visually-hidden']],
      '#wrapper_attributes' => ['class' => ['sort__container']],
      '#options' =>
        [
          'relevance_up' => t('Relevance ↑'),
          'relevance_down' => t('Relevance ↓'),
          'field_edtf_date_created_up' => 'Created ↑',
          'field_edtf_date_created_down' => 'Created ↓',
          'title_up' => 'Title ↑',
          'title_down' => 'Title ↓',
        ],
      '#options_attributes' => [
        'relevance_up' => [
          'data-sort_by' => 'search_api_relevance',
          'data-sort_order' => 'ASC',
        ],
        'relevance_down' => [
          'data-sort_by' => 'search_api_relevance',
          'data-sort_order' => 'DESC',
        ],
        'field_edtf_date_created_up' => [
          'data-sort_by' => 'field_edtf_date_created',
          'data-sort_order' => 'ASC',
        ],
        'field_edtf_date_created_down' => [
          'data-sort_by' => 'field_edtf_date_created',
          'data-sort_order' => 'DESC',
        ],
        'title_up' => [
          'data-sort_by' => 'title',
          'data-sort_order' => 'ASC',
        ],
        'title_down' => [
          'data-sort_by' => 'title',
          'data-sort_order' => 'DESC',
        ],
      ],
      '#attributes' => [
        'autocomplete' => 'off',
      ],
      '#name' => 'sort_order',
      '#value' => "{$defaultSelectedFieldValue}_{$defaultSelectedDirectionValue}",
    ];
  } else {
    return [];
  }
}
/**
 * Implements hook_views_pre_view().
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param $display_id
 * @param array $args
 */
/**
 * Implements hook_views_pre_render().
 *
 * @param \Drupal\views\ViewExecutable $view
 */
function islandora_install_profile_demo_core_views_pre_render(ViewExecutable $view) {
  if (!\Drupal::service('path.matcher')->isFrontPage()) {
    $form_state = new FormState();
    $form_state->setFormState([
      'view' => $view,
      'display' => $view->display_handler->display,
      'exposed_form_plugin' => $view->display_handler->getPlugin('exposed_form'),
      'method' => 'get',
      'rerender' => TRUE,
      'no_redirect' => TRUE,
      'always_process' => TRUE,
    ]);
    $displays = [
      'members' => ['block_1'],
      'solr_search_content' => ['block_1', 'page_1'],
      'home_page_featured_collections' => ['page_1', 'block_2'],
      'manage_members' => ['page_3']
    ];
    if (in_array($view->id(), array_keys($displays))) {
      if (in_array($view->current_display, $displays[$view->id()], TRUE)) {
        // Get pager for view
        $pager = $view->renderPager($view->getExposedInput());
        $items_per_page = [10, 25, 50];
        $current_url_arguments = \Drupal::request()->query->all();
        $page_urls = [];

        foreach ($items_per_page as $item) {
          //Determine if we should set the active tail on some of the options
          $paginationNotPresent = empty(\Drupal::request()->query->get('items_per_page'));
          $isActive = !($paginationNotPresent) && (\Drupal::request()->query->get('items_per_page') == $item);
          $current_url_arguments['items_per_page'] = $item;
          //Set active class
          if ($isActive || ($paginationNotPresent && ($item === 10))) {
            // If no option is present we by default paginate to 10
            $page_urls[$item]['class'] = 'pagination_option_item__link--is-active';
          }
          $page_urls[$item]['value'] = \Drupal::urlGenerator()
            ->generateFromRoute('<current>', [], [
              'query' => $current_url_arguments,
              'absolute' => TRUE,
            ]);
        }
        // TODO replace this with the sort filter coming from the view
        $sort = _get_sort_options();
        //xdebug_break();
        // Hidden Search placeholder for form submit
        $activeDisplay = '';
        $urls = [
          "list" => [
            'value' => \Drupal::urlGenerator()
              ->generateFromRoute('<current>', [], [
                'query' => array_merge(\Drupal::request()->query->all(), ['display' => 'list']),
                'absolute' => TRUE,
              ]),
            'class' => $activeDisplay,
          ],
          "grid" => [
            'value' => \Drupal::urlGenerator()
              ->generateFromRoute('<current>', [], [
                'query' => array_merge(\Drupal::request()->query->all(), ['display' => 'grid']),
                'absolute' => TRUE,
              ]),
            'class' => $activeDisplay,
          ],
        ];
        $currentDisplay = \Drupal::request()->query->get('display');
        if (in_array($currentDisplay, ['list', 'grid'])) {
          $urls[strtolower($currentDisplay)]['class'] = "view-{$currentDisplay}__link--is-active active";
        } else {
          //Set default active class to "list"
          $urls['list']['class'] = "view-list__link--is-active active";
        }


        /**
         * Renderable array options
         */
        $theme = [
          '#theme' => 'views_header',
          '#attached' => [
            'library' => [
              'islandora_install_profile_demo_core/mystic_behaviors',
            ],
          ],
          '#bottom_pager' => $pager,
          '#items_per_page' => $page_urls,
          '#links' => $urls,
          '#pager' => $pager,
          '#exposedFilters' => $sort,
        ];
        // Attach result to view after the main query has been run
        $view->attachment_before = $theme;
      }
    }
  }
}

/**
 * @param $variables
 */
function islandora_install_profile_demo_core_preprocess_views_view_grid(&$variables) {
  $options = $variables['options'] = $variables['view']->style_plugin->options;
  $horizontal = $options['alignment'] === 'horizontal';
  $col = 0;
  $row = 0;
  $items = array();
  $remainders = count($variables['rows']) % $options['columns'];
  $num_rows = floor(count($variables['rows']) / $options['columns']);

  // Set defaults
  template_preprocess_views_view_unformatted($variables);
  // Iterate over each rendered views result row.
  foreach ($variables['rows'] as $result_index => $item) {

    // Add the item.
    if ($horizontal) {
      $items[$row]['content'][$col]['content'] = $item;
    }
    else {
      $items[$col]['content'][$row]['content'] = $item;
    }

    // Create attributes for rows.
    if (!$horizontal || ($horizontal && empty($items[$row]['attributes']))) {
      $row_attributes = array(
        'class' => array(),
      );

      // Add custom row classes.
      $row_class = array_filter(explode(' ', $variables['view']->style_plugin->getCustomClass($result_index, 'row')));
      if (!empty($row_class)) {
        $row_attributes['class'] = array_merge($row_attributes['class'], $row_class);
      }

      // Add row attributes to the item.
      if ($horizontal) {
        $items[$row]['attributes'] = new Attribute($row_attributes);
      }
      else {
        $items[$col]['content'][$row]['attributes'] = new Attribute($row_attributes);
      }
    }

    // Create attributes for columns.
    if ($horizontal || (!$horizontal && empty($items[$col]['attributes']))) {
      $col_attributes = array(
        'class' => array(),
      );

      // Add default views column classes.
      // Add custom column classes.
      $col_class = array_filter(explode(' ', $variables['view']->style_plugin->getCustomClass($result_index, 'col')));
      if (!empty($col_class)) {
        $col_attributes['class'] = array_merge($col_attributes['class'], $col_class);
      }
      // Get current node
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($node) {
        if (!($node instanceof \Drupal\node\NodeInterface)) {
          $node = \Drupal\node\Entity\Node::load($node);
        }
        if ($item['content']['#row']->nid == $node->id()) {
          $col_attributes['class'] =  array_merge($col_attributes['class'], [ 'view-members__item--is-active']);
        }
        // Add automatic width for columns.
        if ($options['automatic_width']) {
          $col_attributes['style'] = 'width: ' . 100 / $options['columns'] . '%;';
        }

        // Add column attributes to the item.
        if ($horizontal) {
          $items[$row]['content'][$col]['attributes'] = new Attribute($col_attributes);
        }
        else {
          $items[$col]['attributes'] = new Attribute($col_attributes);
        }
      }
    }

    // Increase, decrease or reset appropriate integers.
    if ($horizontal) {
      if ($col == 0 && $col != $options['columns'] - 1) {
        $col++;
      }
      elseif ($col >= $options['columns'] - 1) {
        $col = 0;
        $row++;
      }
      else {
        $col++;
      }
    }
    else {
      $row++;
      if (!$remainders && $row == $num_rows) {
        $row = 0;
        $col++;
      }
      elseif ($remainders && $row == $num_rows + 1) {
        $row = 0;
        $col++;
        $remainders--;
      }
    }
  }
  // Add flare
  $variables['#attached']['library'][] = 'field_group/element.horizontal_tabs';
  $variables['#attached']['library'][] = 'islandora_install_profile_demo_core/mystic_behaviors';
  // Add items to the variables array.
  $variables['items'] = $items;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function islandora_install_profile_demo_core_preprocess_html(&$variables) {
  /**  @var  Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;
}

/**
 * Implements hook_theme_registry_alter().
 * @param $theme_registry
 */
function islandora_install_profile_demo_core_theme_registry_alter(&$theme_registry) {
  $suggestions = ['row', 'row__highlighted'];
  foreach ($suggestions as $hook) {
    $theme_registry[$hook]['preprocess functions'][] = 'islandora_install_profile_demo_core_preprocess_row';
  }
}

function islandora_install_profile_demo_core_preprocess_row(&$variables) {
  /**  @var  Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;
}
/**
 * Implements template_preprocess_region().
 */
function islandora_install_profile_demo_core_preprocess_region(&$variables) {
  /**  @var  Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;
}
/**
 * Implements hook_preprocess_HOOK().
 */
function islandora_install_profile_demo_core_preprocess_page(&$variables) {
  /**  @var  Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['node'] = $node;
  // Get Image banner, make it available in the template
  if ($node instanceof NodeInterface ) {
    if ( $node->hasField('field_main_banner') && $node->field_main_banner->entity instanceof \Drupal\file\Entity\File) {
      $variables['banner_image'] = $node->field_main_banner->entity->uri->value;
    }
  }
}
/**
 * Overrides theme to add additional classes for styling
 *
 * @param $variables
 */
function islandora_install_profile_demo_core_preprocess_views_view_unformatted(&$variables) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if (!$is_admin) {
    // Default
    $variables['additional_classes'] = 'view-list';
    $currentDisplay = \Drupal::request()->query->get('display') ?? 'list';
    $variables['additional_classes'] = "view-{$currentDisplay}";

    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {
      if (!($node instanceof \Drupal\node\NodeInterface)) {
        $node = \Drupal\node\Entity\Node::load($node);
      }
    }
    foreach ($variables['rows'] as $result_index => $item) {
      // Create attributes for rows.
      if ($variables['rows'][$result_index]['attributes']) {
        $row_attributes = [
          'class' => []
        ];
      }
      if (isset($variables['rows'][$result_index]['content']['#row'])) {
        if ($node && $variables['rows'][$result_index]['content']['#row']->nid == $node->id()) {
          $row_attributes['class'] = array_merge($row_attributes['class'], ['view-members__item--is-active']);
          // Add custom row classes.
          $variables['rows'][$result_index]['attributes'] = new Attribute($row_attributes);
        }
      }
    }
    // Get facets to make them available for theme files using twig tweak
    $facetsource_id = ['views_block__solr_search_content__block_1', 'views_page__solr_search_content__page_1'];
    /** @var Drupal\facets\FacetManager\DefaultFacetManager $resources */
    $default_facets_namespace = 'search_api';
    $variables['facets'] = [];
    foreach($facetsource_id as $index => $frid) {
      $facets = \Drupal::service('facets.manager')->getFacetsByFacetSourceId("$default_facets_namespace:$frid");
        $variables['facets']['summary'][$frid]['global'] = [
          'id' => 'facets_summary_block:active_filters',
          'label' => 'Selections'
        ];
        $variables['facets']['summary'][$frid]['block'] = [
          'id' => 'facets_summary_block:facet_summary',
          'label' => 'Selections B'
        ];

        foreach ($facets as $facet) {
          //Load facets into array and store it
          /** @var \Drupal\facets\Entity\Facet $facet */
          $variables['facets'][$frid][] = [
            'id' => 'facet_block:' . $facet->id(),
            'label' => $facet->getName()
          ];
        }
    };
    // Set pager if we have more than 1 page
    if (!empty($variables['view']->getPager()->total_items) && !empty( $variables['view']->getPager()->options['items_per_page'] )) {
      if (($variables['view']->getPager()->total_items / $variables['view']->getPager()->options['items_per_page']) > 1) {
        $variables['bottom_pager'] = $variables['view']->renderPager($variables['view']->getExposedInput());
      }
    }
    $variables['#attached']['library'][] = 'field_group/element.horizontal_tabs';
    $variables['bottom_sort'] = _get_sort_options();
  }
}


/**
 * Implements hook_views_query_alter().
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param \Drupal\views\Plugin\views\query\Sql $query
 */
function islandora_install_profile_demo_core_views_query_alter(ViewExecutable $view, $query) {
}

/**
 * Implements hook_entity_extra_field_info
 * Defines Permalink field
 * @return array
 */
function islandora_install_profile_demo_core_entity_extra_field_info() {
  $extra_field = [];
  $extra_field['node']['islandora_object']['display']['permalink_uri'] = [
    'label' => t('Permalink:'),
    'description' => t('The Permalink URI to the object'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra_field['node']['islandora_object']['display']['openseadragon'] = [
    'label' => t('OpenseaDragon Block as a field'),
    'description' => t('Passthrough for the OpenseaDragon block to behave as a field'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra_field['node']['islandora_object']['display']['metadata'] = [
    'label' => t('Metadata Tabs'),
    'description' => t('Loads metadata from the metadata/metadata-parent view modes into a field'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra_field['node']['islandora_object']['display']['metadata_pages'] = [
    'label' => t('Metadata Tabs + Pages'),
    'description' => t('Loads metadata  view modes into a field + pages if there\'s any'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra_field['node']['islandora_object']['display']['object_navigation'] = [
    'label' => t('Parent, pages and current object navigation'),
    'description' => t('Display a set of links (3) that gives users the option to navigate to the parent object, children and more'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  return $extra_field;
}

/**
 * Implements hook_entity_view().
 */
function islandora_install_profile_demo_core_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $ocrExist = FALSE;
  $route_match_item = \Drupal::routeMatch()->getParameters()->get($entity->getEntityTypeId());
  $node = \Drupal::routeMatch()->getParameter('node');
 if ($node instanceof \Drupal\node\NodeInterface) {
    $nodeId = $node->id();
    $url_alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'. $nodeId);
  } else {
    $current_path = \Drupal::service('path.current')->getPath();
    $nodeId = trim(trim($current_path, '/ocr'), 'node/');
    $parentNode = \Drupal::entityTypeManager()->getStorage('node')->load($nodeId);
  }
  // For certain entity types redirect
  if ($entity->bundle() == 'islandora_object') {
    if ($view_mode == 'pdfjs' || $view_mode == 'compound_member') {
      $islandoraUtils = \Drupal::service('islandora.utils');
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['field_external_uri' => 'http://pcdm.org/use#OriginalFile', 'vid' => 'islandora_media_use']);
      /**
       * @var $allMedia Drupal\media\Entity\Media
       */
      $allMedia = $islandoraUtils->getMediaWithTerm($entity, array_pop($terms));
      if ($allMedia instanceof Drupal\media\Entity\Media) {
        if ($allMedia->hasField('field_mime_type')) {
          if (strstr($allMedia->field_mime_type->value, 'image')) {
            // Default media is an image, we DO not need the PDF viewer attached to this display, removing it.
            unset($build['pdfjs_media_evas_entity_view_1']);
          }
        }
      }
    }
  }
  // Does it have OCR. This could be combined with if statement above as a function but for the sake of time this was written out.
  if ($entity->bundle() == 'islandora_object') {
    $islandoraUtil = \Drupal::service('islandora.utils');
    $ocr_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['field_external_uri' => 'http://pcdm.org/use#ExtractedText', 'vid' => 'islandora_media_use']);
    /**
     * @var $transcriptMedia Drupal\media\Entity\Media
     */
    $transcriptMedia = $islandoraUtil->getMediaWithTerm($entity, array_pop($ocr_terms));
    if ($transcriptMedia instanceof Drupal\media\Entity\Media) {
      if ($transcriptMedia->hasField('field_mime_type')) {
        if (strstr($transcriptMedia->field_mime_type->value, 'text/plain')) {
          $ocrExist = TRUE;
        } else {
          $ocrExist = FALSE;
        }
      }
    }
  }

  if ($entity->bundle() == 'islandora_object' && $view_mode == 'compound') {
    // get members of compound object sorted by weight
    $members = views_get_view_result('reorder_children', 'page_1', $entity->id());
    // Get first members and redirect to it
    /**
     * @var \Drupal\views\ResultRow $first
     */
    $first = array_shift($members);
    if ($first !== NULL) {
      $member_nid = $first->nid;
      $response = new RedirectResponse(\Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $member_nid])->toString());
      $response->send();
    }
  }

  // Ensure the entity matches the route.
  if (($entity === $route_match_item) || ($entity->bundle() === 'extracted_text')) {
    // Add check to see if OCR is available.
    if($display->getComponent('openseadragon')) {
      // Load block instance and set the correct manifest for openseadragon, extra fields don't allow an interface to set parameters
      // http://localhost/node/[node:nid]/manifest
      $block = \Drupal::service('plugin.manager.block')->createInstance('openseadragon_block', [
        'iiif_manifest_url' => \Drupal::request()->getSchemeAndHttpHost() . "/node/[node:nid]/manifest"
      ]);
      if (is_object($block)) {
        $build['openseadragon'] =  $block->build();
      }
    }
    if($display->getComponent('metadata')) {
      $block = \Drupal::service('plugin.manager.block')->createInstance('quicktabs_block:compound_object_metadata');
      if (is_object($block)) {
        $build['metadata'] =  $block->build();
      }
    }
    if($display->getComponent('metadata_pages')) {
      $block = \Drupal::service('plugin.manager.block')->createInstance('quicktabs_block:object_metadata_and_pages');
      if (is_object($block)) {
        $build['metadata_pages'] =  $block->build();
      }
    }

     $context_manager = \Drupal::service('context.manager');
    /** @codingStandardsIgnoreStart * */
    //kpr($context_manager->getActiveContexts());
    //\Drupal::messenger()->addStatus($view_mode);
    //  Added to avoid error message.
    $empty_field_resource_type = '';
    if ($display->getComponent('object_navigation') || ($entity->bundle() === 'extracted_text')) {
      if ($entity->bundle() != 'extracted_text') {
        $empty_field_resource_type = (!empty($entity->get('field_resource_type')->entity));
        $nodeResourceModelType = $entity->get('field_resource_type')->entity->getName();
        $nodeModelType = $entity->get('field_model')->entity->getName();
        $immediate_parent_id = ($entity->hasField('field_member_of') && $entity->field_member_of instanceof Drupal\node\Entity\Node) ? $entity->get('field_member_of')->entity->id() : FALSE;
      } else {
        // Manually override for the OCR page.
        $nodeResourceModelType = "Text";
        $nodeModelType = "OCR";
        if (isset($parentNode) && $parentNode->hasField('field_member_of')) {
          $parent_nid = $parentNode->get('field_member_of')->first()->getString();
          $url_alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'. $parent_nid);
        }
        if (isset($parentNode) && $parentNode->hasField('field_identifier')) {
          if (\Drupal\taxonomy\Entity\Term::load($parentNode->field_model->first()->getString())->name->value == 'Digital Document') {
            $pdfContentType = TRUE;
            $immediate_parent_id = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'. $nodeId);
          } else {
            $pdfContentType = FALSE;
            $immediate_parent_id = ($entity->hasField('field_member_of') && $entity->field_member_of instanceof Drupal\node\Entity\Node) ? $entity->get('field_member_of')->entity->id() : $url_alias;
          }
        }
      }

      //Current Object
      $options = ['absolute' => TRUE];
      $url_object = Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $entity->id()], $options);
      // $displays = ['Full View', 'Pages', 'Page', 'OCR'];

      if ($empty_field_resource_type || ($entity->bundle() === 'extracted_text')) {
        $build['object_navigation'] = [
          '#theme' => 'islandora_object_links',
          '#links' => [ ]
        ];
        // This relies on there being a display media for each of these.
        // Admin > Structure > Views > Display media
        // The view uses the Taxonomy > islandora_media_use's PCDM URI to assign a page.
        switch ("{$nodeModelType}_{$nodeResourceModelType}") {
          // PDF
          case 'Digital Document_Text';
          if ($ocrExist) {
            $parent_url = Url::fromRoute('entity.node.canonical', ['node' => $immediate_parent_id], ['absolute' => TRUE]);
            $build['object_navigation']['#links']['parent']['label'] = t('Full View');
            $build['object_navigation']['#links']['parent']['attributes'] = new Attribute(['class' => ['selected', 'horizontal-tab-button'] ]);
            // If OCR exist add link. A non-working test.
            $build['object_navigation']['#links']['ocr']['url'] =  Url::fromRoute('view.display_media.ocr', ['node' => $entity->id()]);
            $build['object_navigation']['#links']['ocr']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
            $build['object_navigation']['#links']['ocr']['label'] = t('OCR');
          }
          break;
          // Newspaper
          case 'Newspaper_Collection':
            break;
          case 'Publication Issue_Collection':
          case 'Paged Content_Interactive Resource':
          case 'Paged Content_Collection':
          case 'Book_Collection':
          case 'Content_Interactive Resource':
            // Current Page, no need for it to be a link
            $parent_url =  Url::fromRoute('entity.node.canonical', ['node' => $immediate_parent_id], ['absolute' => TRUE]);
            $build['object_navigation']['#links']['parent']['label'] = t('Full View');
            $build['object_navigation']['#links']['parent']['attributes'] = new Attribute(['class' => ['selected', 'horizontal-tab-button'] ]);
            // Get children
            $build['object_navigation']['#links']['pages']['url'] =  Url::fromRoute('view.manage_members.page_3', ['node' => $entity->id()], ['query' => ['display' => 'grid']]);
            $build['object_navigation']['#links']['pages']['label'] = t('Pages');
            $build['object_navigation']['#links']['pages']['attributes'] = new Attribute(['class' => ['horizontal-tab-button'] ]);
            break;
          case 'OCR_Text':
            $build['object_navigation']['#links']['parent']['url'] = $immediate_parent_id;
            $build['object_navigation']['#links']['parent']['label'] = t('Full View');
            $build['object_navigation']['#links']['parent']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
            if ($pdfContentType == FALSE) {
              // Siblings
              $build['object_navigation']['#links']['pages']['url'] = '/node/' . $parent_nid . "/pages?display=grid";
              $build['object_navigation']['#links']['pages']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
              $build['object_navigation']['#links']['pages']['label'] = t('Pages');
              // Current Page, this one has NO link so just a placeholder
              $build['object_navigation']['#links']['me']['label'] = t('Page');
              $build['object_navigation']['#links']['me']['url'] = '/node/' . $nodeId;
              $build['object_navigation']['#links']['me']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
            }
            // If OCR exist add link. A non-working test.
            $build['object_navigation']['#links']['ocr']['attributes'] = new Attribute(['class' => ['selected', 'horizontal-tab-button']]);
            $build['object_navigation']['#links']['ocr']['label'] = t('OCR');
            break;
          case 'Page_Text':
          case 'Page_Still Image':
          case 'Page_Image':
          if ($immediate_parent_id) {
            $parent_url = Url::fromRoute('entity.node.canonical', ['node' => $immediate_parent_id], ['absolute' => TRUE]);
            $build['object_navigation']['#links']['parent']['url'] = $parent_url;
            $build['object_navigation']['#links']['parent']['label'] = t('Full View');
            $build['object_navigation']['#links']['parent']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
            // Siblings
            $build['object_navigation']['#links']['pages']['url'] =  Url::fromRoute('view.manage_members.page_3', ['node' => $immediate_parent_id], ['query' => ['display' => 'grid']]);
            $build['object_navigation']['#links']['pages']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
            $build['object_navigation']['#links']['pages']['label'] = t('Pages');
          }else{
            if (!empty($node->get('field_member_of'))) {
              // prevent error from happening when no parent is defined
              $build['object_navigation']['#links']['parent']['url'] = '/node/' . $node->get('field_member_of')->first()->getString();
              $build['object_navigation']['#links']['parent']['label'] = t('Full View');
              $build['object_navigation']['#links']['parent']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
              // Siblings
              $build['object_navigation']['#links']['pages']['url'] = '/node/' . $node->get('field_member_of')->first()->getString() . "/pages?display=grid";
              $build['object_navigation']['#links']['pages']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
              $build['object_navigation']['#links']['pages']['label'] = t('Pages');
            }
          }
            // Current Page, this one has NO link so just a placeholder
            $build['object_navigation']['#links']['me']['label'] = t('Page');
            $build['object_navigation']['#links']['me']['attributes'] = new Attribute(['class' => ['selected', 'horizontal-tab-button']]);
            // If OCR exist add link. A non-working test.
            if ($ocrExist) {
              $build['object_navigation']['#links']['ocr']['url'] =  Url::fromRoute('view.display_media.ocr', ['node' => $entity->id()]);
              $build['object_navigation']['#links']['ocr']['attributes'] = new Attribute(['class' => ['horizontal-tab-button']]);
              $build['object_navigation']['#links']['ocr']['label'] = t('OCR');
            }
            break;
        }
        // Determine the Islandora Model to $url_objectse as the name
      }
    }
    if ($display->getComponent('permalink_uri')) {
      $options = ['absolute' => TRUE];
      $url_object = Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $entity->id()], $options);
      $build['permalink_uri'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'field-permalink-uri',
        ],
        'internal_label' => [
          '#type' => 'item',
          '#title' => t('Permalink:'),
          'internal_uri' => [
            '#type' => 'link',
            '#title' => t("@url", ['@url' => $url_object->toString()]),
            '#url' => $url_object
          ],
        ],
      ];
    }
  }
//  kpr($build);
}

/**
 * Move our module down the list, to disable certain EVA fields when needed
 * Implements hook_module_implements_alter().
 */
function islandora_install_profile_demo_core_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move our hook_entity_type_alter() implementation to the end of the list.
    case 'entity_view':
      $group = $implementations['islandora_install_profile_demo_core'];
      unset($implementations['islandora_install_profile_demo_core']);
      $implementations['islandora_install_profile_demo_core'] = $group;
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function islandora_install_profile_demo_core_preprocess_node(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface && $node->hasField('field_resource_type')) {

  }
}


/**
 * Implements hook_views_pre_view().
 * Make sure we overwrite certain views to get information on the parent object to properly display members
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param $display_id
 * @param array $args
 */
function islandora_install_profile_demo_core_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if (in_array($view->id(), ['islandora_object_metadata', 'members'])) {
    if ($view->current_display === 'block_metadata_parent_object' || $view->current_display === 'entity_view_1') {
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($node instanceof \Drupal\node\NodeInterface && $node->hasField('field_member_of')) {
        // Get value of parent_reference_field
        $field = $node->get('field_member_of');
        if (!$field->isEmpty()) {
          $nids = $field->getValue();
          if (!empty($nids) && isset($nids[0]['target_id'])) {
            $view->args[0] = $nids[0]['target_id'];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for theme_views_view_details().
 */
function template_preprocess_views_view_carapace_details(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];
  $style = $view->style_plugin;
  $options = $style->options;

  $variables['default_row_class'] = !empty($options['default_row_class']);
  foreach ($rows as $id => $row) {
    $variables['rows'][$id] = [];
    $variables['rows'][$id]['content'] = $row;
    $variables['rows'][$id]['attributes'] = new Attribute();
    if ($row_class = $view->style_plugin->getRowClass($id)) {
      $variables['rows'][$id]['attributes']->addClass($row_class);
    }
  }
  $variables['row_content']  = [
    '#theme' => 'item_list',
    '#list_type' => 'ul',
    '#title' => 'My List',
    '#items' => $rows,
    '#attributes' => ['class' => 'myclass'],
    '#wrapper_attributes' => ['class' => 'my_list_container'],
  ];
}
