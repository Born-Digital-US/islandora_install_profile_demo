<?php

use Drupal\Core\Logger\RfcLogLevel;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;

/**
 * Implements hook_install
 * Adds default taxonomy term to the Islandora Resource Type Vocabulary
 */

use Drupal\Core\Site\Settings;
use Drupal\Core\Config\FileStorage;

define("PROFILE_PATH", drupal_get_path('profile', 'islandora_install_profile_demo') . '/config/install');
define("PROFILE_PATH_OPTIONAL", drupal_get_path('profile', 'islandora_install_profile_demo') . '/config/optional');

/**
 * Helper function to import single config file.
 *
 * @param array $config_name
 *   The names of the config items to import from the config sync folder.
 *    items MUST be in order based on dependencies
 * @param string $config_path
 *  path from where to look for files to import, defaults to config/sync or whatever is configured in drupal
 */
function islandora_install_profile_demo_core_import_yml_configs(array $config_name, string $config_path, bool $delete = FALSE) {
  if (empty($config_path)) {
    $config_path = Settings::get('config_sync_directory');
  }
  try {
    if (!is_array($config_name) && !empty($config_name)) {
      throw new \Exception(t('Argument must be a valid list of configuration files'));
    }
    $source = new FileStorage($config_path);
    $config_storage = \Drupal::service('config.storage');
    foreach ($config_name as $single_config) {
      $config_storage->delete($single_config);
      if (!$delete) {
        $config_storage->write($single_config, $source->read($single_config));
      }
    }
  } catch (Exception $e) {
    watchdog_exception("update_error", $e, "Error importing/updating configuration", [], RfcLogLevel::ERROR);
  }
}


/**
 * Implements hook_install().
 * @param $is_syncing
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function islandora_install_profile_demo_core_install($is_syncing) {
  // Machine name of the Taxonomy vocabulary.
  $vocab = 'resource_types';

  // We add the compound object taxonomy
  $items = [
    'Compound Object',
  ];

  foreach ($items as $item) {
   Term::create(array(
      'parent' => array(),
      'name' => $item,
      'vid' => $vocab,
    ))->save();
  }
}


/**
 * Add Periodical
 * Implements hook_update_N().
 * @param $sandbox
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function islandora_install_profile_demo_core_update_8101(&$sandbox) {
  // We add the compound object taxonomy
  $items = [
    'Periodical',
  ];
  $vocab = 'islandora_models';
  foreach ($items as $item) {
    Term::create(array(
      'parent' => array(),
      'name' => $item,
      'vid' => $vocab,
    ))->save();
  }
}

/**
 *  Enables pathauto
 *
 */
function islandora_install_profile_demo_core_update_8201(){
  \Drupal::service('module_installer')->install(['ctools', 'pathauto']);
}

/**
 *  Enables fontawesome
 *
 */
function islandora_install_profile_demo_core_update_8202(){
  \Drupal::service('module_installer')->install(['fontawesome']);
}

/**
 *  Enables islandora_install_profile_demo Client subtheme from islandora_install_profile_demo Bootstrap SASS as the default theme and adminimal and sets it as the default
 *
 */
function islandora_install_profile_demo_core_update_8203(){
  \Drupal::service('theme_installer')->install(['islandora_install_profile_demo_custom_theme', 'adminimal_theme']);
  \Drupal::service('config.factory')->getEditable('system.theme')->set('admin', 'adminimal_theme')->save();
}

/**
 *  Enables layout_library
 *
 */
function islandora_install_profile_demo_core_update_8204(){
  \Drupal::service('module_installer')->install(['layout_library']);
}
/**
 *  Enables config_suite
 *
 */
function islandora_install_profile_demo_core_update_8205(){
  \Drupal::service('module_installer')->install(['config_suite']);
}

/**
 *  Uninstall field_name
 *
 */
function islandora_install_profile_demo_core_update_8206(){
  \Drupal::service('module_installer')->uninstall(['name']);
}

/**
 * Change module's weight to be able to update build array after EVAs are added
 */
function islandora_install_profile_demo_core_update_8207(){
  module_set_weight('islandora_install_profile_demo_core', 9999);
}

/**
 * Makes sure collections without parents are listed under "Browse" collections page
 */
function islandora_install_profile_demo_core_update_8208(){
  islandora_install_profile_demo_core_import_yml_configs([
    'views.view.home_page_featured_collections'
  ], PROFILE_PATH);
}
/**
 * Updates member of reference field, to use repository item sorted by created date as its default
 */
function islandora_install_profile_demo_core_update_8209() {
  islandora_install_profile_demo_core_import_yml_configs([
    'field.storage.node.field_member_of',
    'field.field.node.islandora_object.field_member_of'
  ], PROFILE_PATH);
}

/**
 * Changes global search to exclude compound object members and pages
 */
function islandora_install_profile_demo_core_update_8210() {
  islandora_install_profile_demo_core_import_yml_configs([
    'search_api.index.default_solr_index',
    'views.view.solr_search_content'
  ], PROFILE_PATH_OPTIONAL);
}

/**
 * Changes global search to exclude compound object members and pages
 */
function islandora_install_profile_demo_core_update_8211()
{
  islandora_install_profile_demo_core_import_yml_configs([
    'user.role.administrator',
    'user.role.authenticated'
  ], PROFILE_PATH);
  // Add admin role to user
  $user = user_load_by_name('admin');
  if ($user) {
    $user->addRole('administrator');
    $user->save();
  }
}

/**
 * Programmatically create 'Terms of Use' node
 */
function islandora_install_profile_demo_core_update_8212() {
  $path = '/terms-use';
  $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path, 'en');
  if (strcmp($alias, $path) == 0) {
    $node = Node::create([
      'type' => 'page',
      'langcode' => 'en',
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      // The user ID.
      'uid' => 1,
      'title' => 'Terms of Use',
      'body' => [
        'summary' => 'Summary of terms',
        'value' => '<p>The body of terms.</p>',
        'format' => 'full_html',
      ],
    ]);
    $node->save();
    \Drupal::service('path.alias_storage')->save("/node/" . $node->id(), $path, "en");
  };
}

/**
 * Deletes duplicated summary facets that are no longer used
 */
function islandora_install_profile_demo_core_update_8213() {} {
  islandora_install_profile_demo_core_import_yml_configs([
    'facets_summary.facets_summary.summary',
    'facets_summary.facets_summary.summary_block',
  ], PROFILE_PATH, TRUE);
}
